@model PagedList.IPagedList<IMS.Models.IMSEntity>
@using PagedList.Mvc;
<link href="~/assets/css/custom.css" rel="stylesheet" />
@{
    string role = ViewBag.role;
    string empid = ViewBag.userid;
    string dept = ViewBag.department;
    string location = ViewBag.location;
    ViewBag.Title = "InwardList";
    Layout = "~/Views/Shared/_Layout_IMS.cshtml";
}
@*<link href="~/Content/bootstrap.min.css" rel="stylesheet" type="text/css" />*@
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<link href="~/assets/css/custom.css" rel="stylesheet" />

<div class="inward-list">
    <h5 class="content-title mb-3">Inward Items</h5>
    <div class="card">
        @{
            string count = ViewBag.display;
        }
        <div class="d-flex p-3 px-4 align-items-center justify-content-between inward-search-div ol-md-12">
            <div class="search-div d-flex align-items-center">
                <h5 class="search-font pe-2 mb-0">Search By:</h5>

                @using (Html.BeginForm("InwardList", "Add_InwardMaterial", FormMethod.Post))
                {
                    @Html.DropDownList("Name", new List<SelectListItem>
                    {
                       new SelectListItem{Text = "Inward id", Value="Inward_id"},
                       new SelectListItem{Text= "Department" , Value="Inward_department"},
                       new SelectListItem{Text= "Location" , Value="Inward_Location"},
                       new SelectListItem{Text= "ExpenseNature" , Value="Inward_nature"},
                       new SelectListItem{Text= "Inward_datetime" , Value="Inward_datetime"},
                       new SelectListItem{Text= "Inward_raised_by" , Value="Inward_raised_by"},


                    }, "Select", new { @id = "select", @class = "form-control input-col inward-list-dropdown", @onchange = "Valuefunction()" })

                    @Html.TextBox("SearchValue", null, new { @style = "display:none;", @class = "search1", @id = "search_by_text", @placeholder = "Search" })
                    {
                        // Assuming you have fetched the department data from the database and stored it in a variable named departmentsList
                        List<SelectListItem> departmentItems = new List<SelectListItem>();
                        var context = new IMS.Entities.ServiceVMSEntities();
                        var departmentsList = (from s in context.ServiceUserDepartments
                                               select new
                                               {
                                                   userDepartmentName = s.userDepartmentName,

                                               });


                        foreach (var department in departmentsList)
                        {
                            departmentItems.Add(new SelectListItem { Text = department.userDepartmentName, Value = department.userDepartmentName });
                        }
                        @Html.DropDownList("SearchValue1", departmentItems, "Select Department", new { @id = "select_DN", @style = "display:none; ", @class = "form-control input-col inward-list-dropdown", @onchange = "Valuefunction()" })
                    }
                    @Html.DropDownList("SearchValue_ExpenseN", new List<SelectListItem>
                    {
                      new SelectListItem{ Text = "opex", Value ="opex"},
                      new SelectListItem{Text= "capex" , Value ="capex"},
                      new SelectListItem{Text= "rental" , Value ="rental"},
                    }
                  , "Select", new { @id = "ExpenseNature", @name = "SearchValue2", @class = "search1 form-control input-col inward-list-dropdown", @style = "display:none;" })

                    <input class="search2" type="date" value="Search" style="display:none;" id="search_by_date" name="searchdate" />
                    <input type="submit" value="Search" id="submit">

                    if (ViewBag.countForsearch == 1)
                    {

                        <a class="clear-font" href="@Url.Action("InwardList", "Add_InwardMaterial")">
                            Clear Search
                        </a>
                    }
                }
            </div>

            <div class="rightactionalble-btns d-flex">
                @if (Session["role"].ToString() == "Security Guard")
                {
                    <a class="action-btn mr-18" href="@Url.Action("Add_InwardMaterial", "Add_InwardMaterial")">Add Inward</a>
                }

                @if (Session["role"].ToString() == "Receiver" || Session["role"].ToString() == "Inventory Incharge")
                {
                    var isActionable = Request.QueryString["name"] == "actionable";
                    <a class="action-btn mr-18" href="@Url.Action("InwardList", "Add_InwardMaterial", new { name = "actionable" })" style="margin-bottom:3px;">
                        Actionable Items
                    </a>
                    if (isActionable)
                    {
                        <a class="action-btn" href="@Url.Action("InwardList", "Add_InwardMaterial")" style="margin-bottom:3px;">
                            Clear Search
                        </a>
                    }
                }
            </div>

        </div>

        <div class="card-body pt-0">
            <div class="form addInward inward-list-table">
                <div class="table-wrapper">
                    <table id="paginatedTable">
                        <thead>
                            <tr>
                                <th scope="col">
                                    @Html.ActionLink("Inward Date", "InwardList", new { sortOrder = ViewBag.Inward_datetime, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                </th>
                                <th scope="col">
                                    @Html.ActionLink("VendorName", "InwardList", new { sortOrder = ViewBag.VendorName, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                </th>
                                <th scope="col">
                                    @Html.ActionLink("Department", "InwardList", new { sortOrder = ViewBag.Inward_department, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                </th>
                                <th scope="col">
                                    @Html.ActionLink("Location", "InwardList", new { sortOrder = ViewBag.Inward_Location, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                </th>
                                <th scope="col">
                                    @Html.ActionLink("ExpenseNature", "InwardList", new { sortOrder = ViewBag.Inward_nature, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                </th>
                                <th scope="col">
                                    @Html.ActionLink("Inward_raised_by", "InwardList", new { sortOrder = ViewBag.servicestatuspara, searchString = ViewBag.searchString, Name = ViewBag.Name, SearchValue = ViewBag.searchValue, searchdate = ViewBag.searchdate, Page_no = ViewBag.page })
                                </th>

                                <th scope="col">
                                </th>
                                <th scope="col">
                                </th>

                            </tr>
                            @if (Model.Count() == 0)
                            {
                                <tr>
                                    <td> Records not found </td>
                                </tr>
                            }
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td data-label="inward-date">
                                        @Html.DisplayFor(modelItem => item.InwardDateTime)
                                    </td>
                                    <td data-label="inward-date">
                                        @{
                                            var contextv = new IMS.Entities.ServiceVMSEntities();
                                            var vendornm = (from u in contextv.HTV_Vendor
                                                            where u.vendorId == item.vendorId
                                                            select new { u.vendorName }).FirstOrDefault();

                                            // If vendor name is not found using vendorId, fetch using TempVendorID
                                            if (vendornm == null && !string.IsNullOrEmpty(item.TempVendorID))
                                            {
                                                vendornm = (from u in contextv.TempVendors
                                                            where u.TempVendorID == item.TempVendorID
                                                            select new { vendorName = u.TempVendorName }).FirstOrDefault();
                                            }
                                        }
                                        @if (vendornm != null)
                                        {
                                            @vendornm.vendorName
                                        }
                                    </td>
                                    <td data-label="department">
                                        @{
                                            var context = new IMS.Entities.ServiceVMSEntities();
                                            var deptnm = (from u in context.ServiceUserDepartments where u.userDepartmentId == item.userDepartmentId select new { u.userDepartmentName }).FirstOrDefault();

                                        }
                                        @Html.DisplayFor(modelItem => deptnm.userDepartmentName)
                                    </td>
                                    <td data-label="location">
                                        @Html.DisplayFor(modelItem => item.Location)
                                    </td>

                                    <td data-label="expense-nature">
                                        @Html.DisplayFor(modelItem => item.Inward_ExpenseNature)
                                    </td>


                                    <td data-label="inward-raised-by">
                                        @{
                                            var context1 = new IMS.Entities.ServiceVMSEntities();
                                            var user1 = (from u in context1.Users where u.employeeId == item.InwardEnteredBy select new { u.userName });
                                            string raisedby_name = string.Empty;
                                            foreach (var u in user1)
                                            {
                                                raisedby_name = u.userName;
                                            }
                                            if (raisedby_name == "")
                                            {
                                                raisedby_name = item.InwardEnteredBy;
                                            }
                                        }

                                        @raisedby_name
                                    </td>

                                    <td data-label="actions" class="d-flex align-items-center justify-content-between">
                                        @{
                                            byte[] encoded = System.Text.Encoding.UTF8.GetBytes(item.InwardID);
                                            var InwardCode = Convert.ToBase64String(encoded);
                                        }

                                        <a class="dropdown-item1" href="@Url.Action("InwardDetails", "Add_InwardMaterial", new { inwardID = InwardCode}, null)"> <img class="px-2 action-item" src="~/assets/images/icons/view.svg" alt="View" /></a>

                                        @if (item.Inward_Status == "Inward Added" && role == "Security Guard" && item.Location == location)
                                        {
                                            <a class="dropdown-item1" href="@Url.Action("Edit_InwardMaterial", "Add_InwardMaterial", new { @id = InwardCode }, null)"><img class="px-2  action-item" src="~/assets/images/icons/pen.svg" alt="Edit" /></a>
                                            <a class="dropdown-item1" onclick="Deletedivshow('@item.InwardID');" href="@Url.Action("Delete_InwardMaterial", "Add_InwardMaterial", new { @id = InwardCode })"><img class="px-2  action-item" src="~/assets/images/icons/trash.svg" alt="Delete" /></a>
                                        }

                                    </td>

                                    @{

                                        string inwardstatus = string.Empty;
                                        string roleinims = string.Empty;
                                        string Location = string.Empty;

                                        int Inwardcount = 1;
                                        var inward_id = string.Empty;
                                        var context2 = new IMS.Entities.ServiceVMSEntities();

                                        var doctype = from r in context2.InwardApprovers
                                                      where r.employeeId == empid
                                                      select new { r.RoleInIMS, r.Location };
                                        foreach (var g in doctype)
                                        {
                                            roleinims = g.RoleInIMS;
                                            Location = g.Location;

                                        };
                                        var q = (from t in context1.InwardMaterials
                                                 where t.InwardID == item.InwardID
                                                 select new { t.Inward_Status, t.InwardID });

                                        foreach (var t in q)
                                        {
                                            inwardstatus = t.Inward_Status;
                                            inward_id = t.InwardID;

                                            //if (role == "Inventory Manager")
                                            //{
                                            //    break;
                                            //}
                                            if (role == "Receiver" && inwardstatus == "Inward Added" && Inwardcount == 1 && role == roleinims && location == Location)
                                            {
                                                Inwardcount++;
                                                <td class="col-md-1">
                                                    <span>
                                                        <i class="fa fa-exclamation-circle icon_Inward" style="color:red" title="Pending Approver for Inward"></i>
                                                    </span>
                                                </td>
                                                break;
                                            }
                                            else if (role == "Inventory Incharge" && inwardstatus == "Inward Pending" && Inwardcount == 1 && role == roleinims && location == Location)
                                            {
                                                Inwardcount++;
                                                <td class="col-md-1">
                                                    <span>
                                                        <i class="fa fa-exclamation-circle icon_Inward" style="color:red" title="Pending Approver for Inward"></i>
                                                    </span>
                                                </td>
                                                break;
                                            }


                                        }
                                    }


                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <br />

            </div>
            <div class="d-flex align-items-center justify-content-between">
                Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
                <div class="pagination justify-content-end">
                    @Html.PagedListPager(Model, page => Url.Action("InwardList",
                        new { Page_no = page, sortOrder = ViewBag.CurrentSort, Name = ViewBag.Name, SearchValue = ViewBag.SearchValue, SearchValue1 = ViewBag.SearchValue1, SearchValue2 = ViewBag.SearchValue2, SearchValue3 = ViewBag.SearchValue3, reason = ViewBag.reason, searchdate = ViewBag.searchdate }))
                </div>
            </div>

        </div>
    </div>

</div>

<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
@section Scripts
		{
    <script type="text/javascript">

        $(document).ready(function () {
            $('table tbody tr').each(function () {
                if ($(this).find('td span i').hasClass('fa-exclamation-circle')) {
                    $(this).addClass('highlight');
                }
            });
        });

        var prevElem = document.getElementsByClassName("PagedList-skipToPrevious")[0];
        var nextElem = document.getElementsByClassName("PagedList-skipToNext")[0];


        if (prevElem) {
            prevElem.firstChild.textContent = "Prev";
        }
        if (nextElem) {
            nextElem.firstChild.textContent = "Next";
        }
			function Valuefunction() {
				debugger
				var search_decide = document.getElementById("select");
				var search_option = search_decide.options[search_decide.selectedIndex].value;
				if (search_option == "Inward_id") {
					debugger
					document.getElementById("search_by_text").style.display = "inline";
					document.getElementById("ExpenseNature").style.display = "none";
					document.getElementById("select_DN").style.display = "none";
					document.getElementById("search_by_date").style.display = "none";
				}
				else if (search_option == "Inward_department") {
					document.getElementById("select_DN").style.display = "inline";
					document.getElementById("search_by_text").style.display = "none";
					document.getElementById("ExpenseNature").style.display = "none";
					document.getElementById("MaterialCat").style.display = "none";
					document.getElementById("search_by_date").style.display = "none";
				   @* document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("SearchValue").style.display = "none";*@


				}
				else if (search_option == "Inward_Location") {

					document.getElementById("search_by_text").style.display = "inline";
					document.getElementById("ExpenseNature").style.display = "none";
				   @* document.getElementById("MaterialCat").style.display = "none";*@
					document.getElementById("select_DN").style.display = "none";
					document.getElementById("search_by_date").style.display = "none";
				  @*  document.getElementById("SearchValue").style.display = "none";
					document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("SearchValue").style.display = "none";*@


				}

				else if (search_option == "Inward_nature") {

					document.getElementById("ExpenseNature").style.display = "inline";
					document.getElementById("search_by_text").style.display = "none";

					document.getElementById("select_DN").style.display = "none";
					document.getElementById("search_by_date").style.display = "none";
				   @* document.getElementById("SearchValue").style.display = "none";
					document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("SearchValue").style.display = "none";*@

				}
				else if (search_option == "Inward_datetime") {

					document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("ExpenseNature").style.display = "none";
					document.getElementById("search_by_text").style.display = "none";
					document.getElementById("select_DN").style.display = "none";
				   @* document.getElementById("SearchValue").style.display = "none";
					document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("SearchValue").style.display = "none";
	*@
				}
				else if (search_option == "Inward_raised_by") {
					document.getElementById("search_by_text").style.display = "inline";
					document.getElementById("ExpenseNature").style.display = "none";
					document.getElementById("select_DN").style.display = "none";
					document.getElementById("search_by_date").style.display = "none";
				  @*  document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("search_by_date").style.display = "inline";
					document.getElementById("SearchValue").style.display = "none";
					document.getElementById("SearchValue").style.display = "none";*@

				}

        }
        $(document).ready(function () {
            // Filter actionable items
            $("#actionableBtn").click(function () {
                $(".inward-list-table tbody tr").each(function () {
                    var statusCell = $(this).find("td[col-md-1]");
                    if (statusCell.length === 0) {
                        $(this).hide();
                    } else {
                        $(this).show();
                    }
                });

                if ($(".inward-list-table tbody tr:visible").length === 0) {
                    $(".inward-list-table tbody").html('<tr><td colspan="8">No actionable items found</td></tr>');
                }
            });

            // Clear search and show all items
            $(".clear-font").click(function () {
                $(".inward-list-table tbody tr").show();
                if ($(".inward-list-table tbody tr:visible").length === 0) {
                    $(".inward-list-table tbody").html('<tr><td colspan="8">Records not found</td></tr>');
                }
            });
        });
    </script>
}